import{_ as a,c as n,a4 as o,o as e}from"./chunks/framework.qvkBPMhT.js";const m=JSON.parse('{"title":"MemoryBroker","description":"","frontmatter":{"outline":"deep","title":"MemoryBroker"},"headers":[],"relativePath":"broker/memory.md","filePath":"broker/memory.md","lastUpdated":1691570666000}'),p={name:"broker/memory.md"};function l(r,s,t,c,y,D){return e(),n("div",null,s[0]||(s[0]=[o(`<h2 id="memorybroker" tabindex="-1">MemoryBroker <a class="header-anchor" href="#memorybroker" aria-label="Permalink to &quot;MemoryBroker&quot;">​</a></h2><p><code>MemoryBroker</code>是一个基于<code>Queue</code>的内存消息队列，用于在同一个进程内部的消息传递。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> step</span></span>
<span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">broker </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> MemoryBroker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> MemoryBroker</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">broker</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">queue</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">put</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">test</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span><span style="color:#758575DD;">  # 模拟手动发一条消息</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">broker</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> step1</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">    print</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">(</span><span style="color:#BD976A;">block</span><span style="color:#666666;">=</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre></div>`,3)]))}const E=a(p,[["render",l]]);export{m as __pageData,E as default};
