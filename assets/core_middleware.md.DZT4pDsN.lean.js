import{_ as a,c as n,a4 as l,o}from"./chunks/framework.qvkBPMhT.js";const D=JSON.parse('{"title":"Middleware","description":"","frontmatter":{"outline":"deep","title":"Middleware"},"headers":[],"relativePath":"core/middleware.md","filePath":"core/middleware.md","lastUpdated":1692372290000}'),p={name:"core/middleware.md"};function e(t,s,c,r,y,d){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h2><p>中间件在<code>@step</code>中是一个可选的组件，它可以在任务执行前后做一些事情。</p><p>其中内置四个方法来hook任务执行中的行为：</p><ul><li><code>before_send</code>：消息发送之前</li><li><code>after_send</code>：消息发送之后</li><li><code>before_consume</code>：消费消息之前</li><li><code>after_consume</code>：消费消息之后</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#CB7676;">class</span><span style="color:#5DA994;"> BaseMiddleware</span><span style="color:#666666;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> before_send</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#C98A7D77;">        &quot;&quot;&quot;</span><span style="color:#C98A7D;">消息发送之前</span><span style="color:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> after_send</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#C98A7D77;">        &quot;&quot;&quot;</span><span style="color:#C98A7D;">消息发送之后</span><span style="color:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> before_consume</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#C98A7D77;">        &quot;&quot;&quot;</span><span style="color:#C98A7D;">消费消息之前</span><span style="color:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> after_consume</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#C98A7D77;">        &quot;&quot;&quot;</span><span style="color:#C98A7D;">消费消息之后</span><span style="color:#C98A7D77;">&quot;&quot;&quot;</span></span></code></pre></div><h2 id="跳过后续中间件" tabindex="-1">跳过后续中间件 <a class="header-anchor" href="#跳过后续中间件" aria-label="Permalink to &quot;跳过后续中间件&quot;">​</a></h2><p>当你想在中间件中判断某些条件，如果满足条件则跳过后续中间件，可以直接抛出<code>StopMiddleware</code>异常。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> BaseMiddleware</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> StopMiddleware</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">class</span><span style="color:#5DA994;"> MyMiddleware</span><span style="color:#666666;">(</span><span style="color:#80A665;">BaseMiddleware</span><span style="color:#666666;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> before_consume</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#4D9375;">        raise</span><span style="color:#DBD7CAEE;"> StopMiddleware</span><span style="color:#666666;">()</span></span></code></pre></div><h2 id="丢弃消息" tabindex="-1">丢弃消息 <a class="header-anchor" href="#丢弃消息" aria-label="Permalink to &quot;丢弃消息&quot;">​</a></h2><p>当你想在中间件中判断某些条件，如果满足条件则丢弃消息，可以直接抛出<code>DropMessage</code>异常。</p><p>内置<code>UniqueMiddleware</code>就是这样的一个<a href="https://github.com/mic1on/onestep/blob/main/src/onestep/middleware/unique.py" target="_blank" rel="noreferrer">中间件</a>，它会判断消息是否已经被消费过，如果已经被消费过则丢弃消息。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#CB7676;">class</span><span style="color:#5DA994;"> UniqueMiddleware</span><span style="color:#666666;">(</span><span style="color:#80A665;">BaseMiddleware</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    default_hash_func </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> hash_func</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> before_consume</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        message_hash </span><span style="color:#666666;">=</span><span style="color:#C99076;"> self</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">default_hash_func</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#4D9375;">        if</span><span style="color:#C99076;"> self</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">has_seen</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message_hash</span><span style="color:#666666;">):</span></span>
<span class="line highlighted"><span style="color:#4D9375;">            raise</span><span style="color:#DBD7CAEE;"> DropMessage</span><span style="color:#666666;">(</span><span style="color:#CB7676;">f</span><span style="color:#C98A7D;">&quot;Message&lt;</span><span style="color:#C99076;">{</span><span style="color:#DBD7CAEE;">message</span><span style="color:#C99076;">}</span><span style="color:#C98A7D;">&gt; has been seen before&quot;</span><span style="color:#666666;">)</span></span></code></pre></div><h2 id="自定义中间件" tabindex="-1">自定义中间件 <a class="header-anchor" href="#自定义中间件" aria-label="Permalink to &quot;自定义中间件&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">⚠️继承关系</p><p>自定义中间件必须继承自<code>BaseMiddleware</code></p></div><p>你可以在任务的流转过程中，自定义中间件来做一些事情。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> BaseMiddleware</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">class</span><span style="color:#5DA994;"> MyMiddleware</span><span style="color:#666666;">(</span><span style="color:#80A665;">BaseMiddleware</span><span style="color:#666666;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> before_consume</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">        print</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">before consume</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">    def</span><span style="color:#80A665;"> after_consume</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">self</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> *</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> **</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">        print</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">after consume</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span></code></pre></div><p>然后在<code>@step</code>中使用<code>middlewares</code>参数来指定中间件。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> step</span></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#C99076;">...</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> middlewares</span><span style="color:#666666;">=[</span><span style="color:#DBD7CAEE;">MyMiddleware</span><span style="color:#666666;">()])</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> my_task</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">    print</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">my task</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span></code></pre></div>`,18)]))}const C=a(p,[["render",e]]);export{D as __pageData,C as default};
