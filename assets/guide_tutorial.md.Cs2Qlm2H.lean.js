import{_ as a,c as n,a4 as l,o as p}from"./chunks/framework.qvkBPMhT.js";const E=JSON.parse('{"title":"入门教程 | 指南","description":"","frontmatter":{"title":"入门教程 | 指南"},"headers":[],"relativePath":"guide/tutorial.md","filePath":"guide/tutorial.md","lastUpdated":1698847908000}'),o={name:"guide/tutorial.md"};function e(t,s,r,c,y,D){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="入门教程" tabindex="-1">入门教程 <a class="header-anchor" href="#入门教程" aria-label="Permalink to &quot;入门教程&quot;">​</a></h1><h3 id="定时任务" tabindex="-1">定时任务 <a class="header-anchor" href="#定时任务" aria-label="Permalink to &quot;定时任务&quot;">​</a></h3><p>这里将演示一个最简单的场景，我们需要定时执行任务，然后将数据保存到队列中。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> step</span></span>
<span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">broker </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> CronBroker</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 定义任务的输入来自定时任务</span></span>
<span class="line"><span style="color:#DBD7CAEE;">cron_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> CronBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">* * * * * */3</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#758575DD;"># 定义任务的结果输出至队列</span></span>
<span class="line"><span style="color:#DBD7CAEE;">result_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">result</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 使用装饰器定义任务</span></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">cron_broker</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> to_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">result_broker</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> cron_job</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#758575DD;">    # to do something</span></span>
<span class="line"><span style="color:#4D9375;">    return</span><span style="color:#DBD7CAEE;"> random</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">randint</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#4C9A91;"> 100</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 启动任务</span></span>
<span class="line"><span style="color:#DBD7CAEE;">step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">(</span><span style="color:#BD976A;">block</span><span style="color:#666666;">=</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre></div><p>启动任务后，<code>cron_job</code>函数将会每3秒执行一次，并且将结果保存到队列中。</p><h3 id="爬虫" tabindex="-1">爬虫 <a class="header-anchor" href="#爬虫" aria-label="Permalink to &quot;爬虫&quot;">​</a></h3><p>在爬虫中，抓取列表页，然后进入详情页，再抓取详情页中的数据是一个十分常见的场景。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> step</span></span>
<span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">broker </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> MemoryBroker</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span></span>
<span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">middleware </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> MemoryUniqueMiddleware</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 定义任务的数据持久化</span></span>
<span class="line"><span style="color:#DBD7CAEE;">page_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> MemoryBroker</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">list_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">spider.list</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">detail_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">spider.detail</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 定义列表抓取，使用10线程来抓取，将抓取的url交给详情</span></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">page_broker</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> to_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">list_broker</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> workers</span><span style="color:#666666;">=</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">async</span><span style="color:#CB7676;"> def</span><span style="color:#80A665;"> crawl_list</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#4D9375;">    async</span><span style="color:#4D9375;"> with</span><span style="color:#DBD7CAEE;"> httpx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">AsyncClient</span><span style="color:#666666;">()</span><span style="color:#4D9375;"> as</span><span style="color:#DBD7CAEE;"> client</span><span style="color:#666666;">:</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        resp </span><span style="color:#666666;">=</span><span style="color:#4D9375;"> await</span><span style="color:#DBD7CAEE;"> client</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">get</span><span style="color:#666666;">(</span><span style="color:#CB7676;">f</span><span style="color:#C98A7D;">&quot;https://httpbin.org/anything/</span><span style="color:#C99076;">{</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#C99076;">}</span><span style="color:#C98A7D;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        url </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> resp</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">json</span><span style="color:#666666;">().</span><span style="color:#DBD7CAEE;">get</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">url</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#4D9375;">        return</span><span style="color:#DBD7CAEE;"> url</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 定义详情抓取，将抓取的结果保存到队列。</span></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">list_broker</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> to_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">detail_broker</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#BD976A;">      middlewares</span><span style="color:#666666;">=[</span><span style="color:#DBD7CAEE;">MemoryUniqueMiddleware</span><span style="color:#666666;">()])</span></span>
<span class="line"><span style="color:#CB7676;">async</span><span style="color:#CB7676;"> def</span><span style="color:#80A665;"> crawl_detail</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#4D9375;">    async</span><span style="color:#4D9375;"> with</span><span style="color:#DBD7CAEE;"> httpx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">AsyncClient</span><span style="color:#666666;">()</span><span style="color:#4D9375;"> as</span><span style="color:#DBD7CAEE;"> client</span><span style="color:#666666;">:</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        resp </span><span style="color:#666666;">=</span><span style="color:#4D9375;"> await</span><span style="color:#DBD7CAEE;"> client</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">get</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#4D9375;">        return</span><span style="color:#DBD7CAEE;"> resp</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">json</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4D9375;">if</span><span style="color:#B8A965;"> __name__</span><span style="color:#CB7676;"> ==</span><span style="color:#C98A7D77;"> &#39;</span><span style="color:#C98A7D;">__main__</span><span style="color:#C98A7D77;">&#39;</span><span style="color:#666666;">:</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">set_debugging</span><span style="color:#666666;">()</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">(</span><span style="color:#BD976A;">block</span><span style="color:#666666;">=</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre></div><p>我们模拟是内存page_broker来生成任务的，所以我们需要模拟投递10个页面。有两种方式：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">to_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">page_broker</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> build_task</span><span style="color:#666666;">():</span></span>
<span class="line"><span style="color:#C98A7D77;">    &quot;&quot;&quot;</span><span style="color:#C98A7D;">模拟创建10个任务</span><span style="color:#C98A7D77;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#4D9375;">    yield from</span><span style="color:#B8A965;"> range</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#4C9A91;"> 11</span><span style="color:#666666;">)</span></span></code></pre></div><p>或者，直接对broker进行消息publish</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">for</span><span style="color:#DBD7CAEE;"> i </span><span style="color:#4D9375;">in</span><span style="color:#B8A965;"> range</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">1</span><span style="color:#666666;">,</span><span style="color:#4C9A91;"> 11</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    page_broker</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">publish</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">i</span><span style="color:#666666;">)</span></span></code></pre></div><p>这样，<code>crawl_list</code>收到页码负责抓列表，它采用2个线程并发抓取，抓取到url后，将url交给<code>crawl_detail</code>，<code>crawl_detail</code>收到后访问详情，将结果保存到队列。</p><p>值得注意的是：<code>crawl_detail</code>使用了<code>MemoryUniqueMiddleware</code>，它是一个中间件，用于保证队列中不重复。这是一个基于本地内存的去重，如果有更高的需求可以采用redis或者布隆过滤器等等...</p><p>有了MQ的加持，<code>crawl_list</code>和<code>crawl_detail</code>可以在任何能连接MQ的设备上分布式运行，你完全可以在A机器上运行<code>crawl_list</code>，在B机器上运行<code>crawl_detail</code>。</p>`,15)]))}const A=a(o,[["render",e]]);export{E as __pageData,A as default};
