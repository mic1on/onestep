import{_ as a,c as n,a4 as o,o as l}from"./chunks/framework.qvkBPMhT.js";const D=JSON.parse('{"title":"Broker","description":"","frontmatter":{"outline":"deep","title":"Broker"},"headers":[],"relativePath":"core/broker.md","filePath":"core/broker.md","lastUpdated":1692372290000}'),p={name:"core/broker.md"};function e(r,s,t,c,i,y){return l(),n("div",null,s[0]||(s[0]=[o(`<h2 id="broker" tabindex="-1">Broker <a class="header-anchor" href="#broker" aria-label="Permalink to &quot;Broker&quot;">​</a></h2><h3 id="初识broker" tabindex="-1">初识Broker <a class="header-anchor" href="#初识broker" aria-label="Permalink to &quot;初识Broker&quot;">​</a></h3><p>Broker是一个消息代理，它为多任务之间的通信提供了一个中心点。</p><p>在一段最简单的<code>@step</code>中，来阐述一下Broker的作用：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> CronBroker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">build_job_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> CronBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">* * * * * */3</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">build_job_broker</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> task_one</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#758575DD;">    # to do some work</span></span>
<span class="line"><span style="color:#B8A965;">    print</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">(</span><span style="color:#BD976A;">block</span><span style="color:#666666;">=</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre></div><ul><li>使用<a href="/broker/cron.html">CronBroker</a>来定义一个定时任务</li><li>使用<code>@step</code>装饰器来定义一个任务</li><li>使用<code>from_broker</code>参数来指定任务触发来源</li></ul><p>在<code>start</code>启动后方可在控制台每隔三秒钟输出：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>{&#39;body&#39;: {}, &#39;extra&#39;: {&#39;task_id&#39;: &#39;f2fa539b-c7f3-4e2a-a938-3c62582baf8a&#39;, &#39;publish_time&#39;: 1691682525.791, &#39;failure_count&#39;: 0}}</span></span>
<span class="line"><span>{&#39;body&#39;: {}, &#39;extra&#39;: {&#39;task_id&#39;: &#39;e9ed0e2a-7776-4acd-9179-168be04f696f&#39;, &#39;publish_time&#39;: 1691682528.799, &#39;failure_count&#39;: 0}}</span></span>
<span class="line"><span>{&#39;body&#39;: {}, &#39;extra&#39;: {&#39;task_id&#39;: &#39;9b70ca99-1c5a-4d61-a038-57960983e0b1&#39;, &#39;publish_time&#39;: 1691682531.808, &#39;failure_count&#39;: 0}}</span></span></code></pre></div><h3 id="数据流转" tabindex="-1">数据流转 <a class="header-anchor" href="#数据流转" aria-label="Permalink to &quot;数据流转&quot;">​</a></h3><p>解决了数据从哪里来的问题，接下来要解决数据流向哪里。<code>to_broker</code>参数就是来定义任务最终完成的结果发给谁。</p><p>依然是上面的代码</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> step</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> CronBroker</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">build_job_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> CronBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">* * * * * */3</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">)</span></span>
<span class="line highlighted"><span style="color:#DBD7CAEE;">list_job_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">list_job</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span><span style="color:#666666;"> {</span></span>
<span class="line highlighted"><span style="color:#C98A7D77;">    &quot;</span><span style="color:#C98A7D;">username</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">:</span><span style="color:#C98A7D77;"> &quot;</span><span style="color:#C98A7D;">admin</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line highlighted"><span style="color:#C98A7D77;">    &quot;</span><span style="color:#C98A7D;">password</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">:</span><span style="color:#C98A7D77;"> &quot;</span><span style="color:#C98A7D;">admin</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line highlighted"><span style="color:#666666;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">build_job_broker</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> to_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">list_job_broker</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> task_one</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#758575DD;">    # todo some work</span></span>
<span class="line"><span style="color:#4D9375;">    return</span><span style="color:#DBD7CAEE;"> message</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">(</span><span style="color:#BD976A;">block</span><span style="color:#666666;">=</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre></div><p>这里就实现了定时触发任务，然后将任务结果发送到RabbitMQ中。</p><p>上游<code>list_job_broker</code>收到了任务结果，下游<code>RabbitMQBroker</code>也可以对接收到的消息进行处理。这就实现了最简单的分布式任务的调度。</p><h2 id="自定义broker" tabindex="-1">自定义Broker <a class="header-anchor" href="#自定义broker" aria-label="Permalink to &quot;自定义Broker&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">⚠️继承关系</p><p>自定义Broker必须继承自<code>BaseBroker</code></p></div>`,16)]))}const b=a(p,[["render",e]]);export{D as __pageData,b as default};
