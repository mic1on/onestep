import{_ as a,c as n,a4 as o,o as p}from"./chunks/framework.qvkBPMhT.js";const d=JSON.parse('{"title":"RabbitMQBroker","description":"","frontmatter":{"outline":"deep","title":"RabbitMQBroker"},"headers":[],"relativePath":"broker/rabbitmq.md","filePath":"broker/rabbitmq.md","lastUpdated":1691683588000}'),l={name:"broker/rabbitmq.md"};function e(t,s,r,c,y,i){return p(),n("div",null,s[0]||(s[0]=[o(`<h2 id="rabbitmqbroker" tabindex="-1">RabbitMQBroker <a class="header-anchor" href="#rabbitmqbroker" aria-label="Permalink to &quot;RabbitMQBroker&quot;">​</a></h2><p><code>RabbitMQBroker</code> 是基于 <a href="https://www.rabbitmq.com/" target="_blank" rel="noreferrer">RabbitMQ</a> 消息队列中间件的 MQ 服务。</p><p>这也是分布式任务中最为核心的broker。利用此broker，可以搭建一个分布式任务调度平台，实现任务的异步分发、执行与调度。</p><p>在使用前请先确保已正确安装RabbitMQ服务，并正确配置了RabbitMQ的连接信息。</p><p>为了方便，我们在本地使用 <strong>docker</strong> 快速搭建一个 RabbitMQ 服务。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#80A665;">docker</span><span style="color:#C98A7D;"> run</span><span style="color:#C99076;"> -d</span><span style="color:#C99076;"> --name</span><span style="color:#C98A7D;"> rabbitmq</span><span style="color:#C99076;">  --restart=always</span><span style="color:#C99076;"> -p</span><span style="color:#C98A7D;"> 5672:5672</span><span style="color:#C99076;"> -p</span><span style="color:#C98A7D;"> 15672:15672</span><span style="color:#C99076;"> --hostname</span><span style="color:#C98A7D;"> rabbitmq</span><span style="color:#C99076;"> -e</span><span style="color:#C98A7D;"> RABBITMQ_DEFAULT_VHOST=/</span><span style="color:#C99076;"> -e</span><span style="color:#C98A7D;"> RABBITMQ_DEFAULT_USER=</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">admin</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C99076;"> -e</span><span style="color:#C98A7D;"> RABBITMQ_DEFAULT_PASS=</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">admin</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;"> rabbitmq:3-management</span></span></code></pre></div><p>启动成功后，可以在浏览器中访问 <code>http://localhost:15672</code> 登录 RabbitMQ 管理界面，默认用户名和密码均为 <code>admin</code>。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> onestep </span><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">rmq_broker </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> RabbitMQBroker</span><span style="color:#666666;">(</span></span>
<span class="line"><span style="color:#C98A7D77;">    &quot;</span><span style="color:#C98A7D;">test_queue</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">    {</span></span>
<span class="line"><span style="color:#C98A7D77;">        &quot;</span><span style="color:#C98A7D;">username</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">:</span><span style="color:#C98A7D77;"> &quot;</span><span style="color:#C98A7D;">admin</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#C98A7D77;">        &quot;</span><span style="color:#C98A7D;">password</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">:</span><span style="color:#C98A7D77;"> &quot;</span><span style="color:#C98A7D;">admin</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">    }</span></span>
<span class="line"><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">rmq_broker</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> do_some_thing</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">    print</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">do_some_thing</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">step</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">(</span><span style="color:#BD976A;">block</span><span style="color:#666666;">=</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您不必担心MQ服务中还未申明<code>test_queue</code>队列，当 <code>RabbitMQBroker</code>实例化时，会自动创建队列。</p></div><p>此时我们可以在RabbitMQ管理界面中看到一个名为<code>test_queue</code>的队列。尝试在这个队列手动模拟发送一条消息，并查看是否被<code>do_some_thing</code>消费。</p><p><img src="https://miclon-job.oss-cn-hangzhou.aliyuncs.com/img/20230810083326.png" alt=""></p><p><img src="https://miclon-job.oss-cn-hangzhou.aliyuncs.com/img/20230810083246.png" alt=""></p><blockquote><p>消息还附带一些元信息，大部分情况下您都不必关心它们的存在。</p></blockquote><p>通常，在接收到消息后，我们需要对消息进行处理，并返回处理结果。</p><p>可能这个结果会交给下游的MQ继续处理，也可能是插入到数据库中，也可能是返回给用户。</p><p>接下来我继续在<code>@step</code>装饰器上做点文章，在<code>do_some_thing</code>函数中，我使用<code>return</code>/<code>yield</code> 将处理结果返回给下游的MQ。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#758575DD;"># return的消息将发往to_broker</span></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">rmq_broker</span><span style="color:#666666;">,</span><span style="color:#BD976A;"> to_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">rmq_broker2</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> build_todo_list</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">    print</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">do_some_thing</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body </span><span style="color:#666666;">=</span><span style="color:#C98A7D77;"> &quot;</span><span style="color:#C98A7D;">I am done.</span><span style="color:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="color:#4D9375;">    return</span><span style="color:#DBD7CAEE;"> message</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 监控rmq_broker2</span></span>
<span class="line"><span style="color:#666666;">@</span><span style="color:#80A665;">step</span><span style="color:#666666;">(</span><span style="color:#BD976A;">from_broker</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">rmq_broker2</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#CB7676;">def</span><span style="color:#80A665;"> finish_job</span><span style="color:#666666;">(</span><span style="color:#DBD7CAEE;">message</span><span style="color:#666666;">):</span></span>
<span class="line"><span style="color:#B8A965;">    print</span><span style="color:#666666;">(</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#C98A7D;">finish_job</span><span style="color:#C98A7D77;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> message</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">body</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#4D9375;">    return</span><span style="color:#DBD7CAEE;"> message</span></span></code></pre></div><p>控制台输出：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>do_some_thing Hello MICLON!</span></span>
<span class="line"><span>finish_job I am done.</span></span></code></pre></div>`,19)]))}const b=a(l,[["render",e]]);export{d as __pageData,b as default};
